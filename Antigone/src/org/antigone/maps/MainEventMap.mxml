<?xml version="1.0" encoding="utf-8"?>
<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">
	
	<mx:Script>
		<![CDATA[
			import mx.events.*;
			import org.antigone.events.*;
			import org.antigone.business.*;
			import org.antigone.adapters.*;
		]]>
	</mx:Script>
	
	<!-- FlexEvent.PREINITIALIZE -->
	
	<!-- Create the Managers (we need to specificaly instanciate them to pass the dispatcher
	     constructor argument) -->
	<EventHandlers type="{FlexEvent.PREINITIALIZE}">
		<ObjectBuilder generator="{UserManager}" constructorArguments="{scope.dispatcher}" />
		<ObjectBuilder generator="{LessonManager}" constructorArguments="{scope.dispatcher}" />
		<ObjectBuilder generator="{CourseManager}" constructorArguments="{scope.dispatcher}" />
		<ObjectBuilder generator="{ExerciseManager}" constructorArguments="{scope.dispatcher}" />
		
		<ObjectBuilder generator="{ProgressManager}" registerTarget="true" constructorArguments="{scope.dispatcher}" />
		<PropertySetter generator="{ProgressManager}" targetKey="autosave" source="{true}" />
	</EventHandlers>
	
	
	<!-- UserEvents coming from the views _________________________________________________________ -->

	<!-- Loging in -->
	<EventHandlers type="{UserEvent.LOGIN}">
		<MethodInvoker generator="{UserManager}" method="ConnectUser" arguments="{[event.user]}" />
		<CallBack method="CheckLoginResult" arguments="{lastReturn}" />
	</EventHandlers>
	
	<!-- Creating a new User  -->
	<EventHandlers type="{UserEvent.NEW_USER}">
		<MethodInvoker generator="{UserManager}" method="CreateUser" arguments="{[event.user]}" />
		<CallBack method="CheckUserCreationResponse" arguments="{lastReturn}"/>
	</EventHandlers>
	
	<!-- Loging out -->
	<EventHandlers type="{UserEvent.LOGOUT}">
		<MethodInvoker generator="{UserManager}" method="DisconnectUser" />
	</EventHandlers>
	
	
	<!-- Application-wide UserEvents _______________________________________________________________-->
	
	<!-- User successfully logged in -->
	<EventHandlers type="{UserEvent.LOGIN_SUCCESSFUL}">
		<EventAnnouncer generator="{NavigationEvent}" type="{NavigationEvent.DASHBOARD}" />
		<!-- We force lesson refresh to force the dispatch of the LESSON_LOADED event. Could be improved. -->
		<MethodInvoker generator="{LessonManager}" method="LoadLessons" arguments="{true}"/>
		<MethodInvoker generator="{LessonManager}" method="LoadStyleSheet" />
	</EventHandlers>
	
	<!-- User successfully logged out -->
	<EventHandlers type="{UserEvent.LOGOUT_SUCCESSFUL}">
		<EventAnnouncer generator="{NavigationEvent}" type="{NavigationEvent.LOGIN}" />
	</EventHandlers>
	
	<!-- New User successfully created -->
	<EventHandlers type="{UserEvent.NEW_USER_SUCCESSFUL}">
		<MethodInvoker generator="{UserManager}" method="ConnectUser" arguments="{[event.user]}" />
	</EventHandlers>
	
	
	<!-- Lessons events __________________________________________________________________________ -->
	
	<!-- A lesson was loaded -->
	<EventHandlers type="{LessonEvent.LESSON_LOADED}">
		<MethodInvoker generator="{ProgressManager}" method="RestoreProgression" arguments="{event.lesson}" />
	</EventHandlers>
	
	<!-- A LessonItem was clicked -->
	<EventHandlers type="{LessonEvent.LESSON_CLICKED}">
		<MethodInvoker generator="{LessonManager}" method="SelectLesson" arguments="{[event.lesson]}" />
	</EventHandlers>
	
	<!-- A new Lesson has been selected -->
	<EventHandlers type="{LessonEvent.LESSON_SELECTED}">
		<EventAnnouncer generator="{NavigationEvent}" type="{NavigationEvent.LESSON}" />
	</EventHandlers>
	
	<!-- Navigate in a lesson's content -->
	<EventHandlers type="{NavigationEvent.LESSON_CONTENT}">
		<PropertySetter generator="{LessonManager}" targetKey="selectedContentIndex" source="{event.index}" />
	</EventHandlers>
	
	
	<!-- Course events ________________________________________________________________________ -->
	
	<EventHandlers type="{ContentEvent.COURSE_VALIDATED}">
		<MethodInvoker generator="{CourseManager}" method="Validate" arguments="{event.content}" />
		<MethodInvoker generator="{ProgressManager}" method="SaveLessonProgression" arguments="{event.content.parent}"/>
	</EventHandlers>
	
	<!-- An course has been sucessfully completed -->
	<EventHandlers type="{ContentEvent.COURSE_SUCCEEDED}">
			<!-- Nothing happens for now -->
	</EventHandlers>
	
	
	<!-- Exercise events ________________________________________________________________________ -->
	
	<!-- The validation of an Exercise has been requested -->
	<EventHandlers type="{ContentEvent.EXERCISE_VALIDATED}">
		<MethodInvoker generator="{ExerciseManager}" method="Validate" arguments="{event.content}" />
		<CallBack method="OnValidated" arguments="{lastReturn}" />
		<MethodInvoker generator="{ProgressManager}" method="SaveLessonProgression" arguments="{event.content.parent}"/>
	</EventHandlers>
	
	<!-- An exercise has been sucessfully completed -->
	<EventHandlers type="{ContentEvent.EXERCISE_SUCCEEDED}">
		<!-- Nothing happens for now -->
	</EventHandlers>
	
</EventMap>
